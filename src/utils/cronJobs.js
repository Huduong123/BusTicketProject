const cron = require('node-cron');
const Ticket = require('../models/ticketModel');
const Route = require('../models/routeModel');
const Trip = require('../models/tripModel');
const TripStop = require('../models/tripStopModel');

// üïí 1. X√≥a v√© h·∫øt h·∫°n (m·ªói ph√∫t)
cron.schedule('* * * * *', async () => {
    try {
        console.log("üïí Cron Job: Ki·ªÉm tra v√© h·∫øt h·∫°n...");
        await Ticket.deleteExpiredTickets();
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a v√© h·∫øt h·∫°n:", error);
    }
});

// üïõ 2. T·∫°o chuy·∫øn xe m·ªõi n·∫øu qua ng√†y (m·ªói ph√∫t)
cron.schedule('0 0 * * *', async () => {
    try {
        console.log("üïõ Cron Job: Ki·ªÉm tra v√† t·∫°o chuy·∫øn m·ªõi cho c√°c tuy·∫øn...");

        const routes = await Route.getRouteAdmin();
        const today = new Date();
        today.setHours(0, 0, 0, 0); // reset v·ªÅ 00:00:00

        for (const route of routes) {
            const times = JSON.parse(route.departure_times || '[]');
            const buses = JSON.parse(route.bus_ids || '[]');

            if (times.length !== buses.length) {
                console.warn(`‚ö†Ô∏è Tuy·∫øn ID ${route.id} c√≥ s·ªë gi·ªù v√† xe kh√¥ng kh·ªõp.`);
                continue;
            }

            const latestTripDate = await Trip.getLatestTripDateByRoute(route.id);
            const latestDate = latestTripDate ? new Date(latestTripDate) : new Date(today);
            latestDate.setDate(latestDate.getDate() + 1); // Ng√†y ti·∫øp theo c·∫ßn t·∫°o

            const targetDateStr = latestDate.toISOString().split("T")[0];
            console.log(`üìÖ T·∫°o chuy·∫øn cho ng√†y ${targetDateStr} (route_id: ${route.id})`);

            for (let i = 0; i < times.length; i++) {
                const time = times[i];
                const bus_id = buses[i];

                const [hour, minute] = time.split(':').map(Number);
                const departure = new Date(latestDate);
                departure.setHours(hour, minute, 0, 0);

                const [h, m] = route.travel_time.split(':').map(Number);
                const arrival = new Date(departure.getTime() + (h * 60 + m) * 60000);

                const result = await Trip.createTrip(
                    route.departure_location,
                    route.destination_location,
                    route.distance,
                    route.id,
                    bus_id,
                    departure,
                    arrival,
                    'ON_TIME',
                    route.ticket_price
                );

                if (result.success && result.tripId) {
                    const oldTripId = await Trip.getAnyTripIdByRoute(route.id, result.tripId);
                    // th√™m h√†m ph·ª• ƒë·ªÉ l·∫•y 1 trip_id c≈©
                
                    if (oldTripId) {
                        const { pickup_location, dropoff_location } = await Trip.getPickupAndDropoffLocations(oldTripId);
                
                        if (pickup_location) {
                            await TripStop.addTripStop(result.tripId, 'PICKUP', pickup_location);
                        }
                        if (dropoff_location) {
                            await TripStop.addTripStop(result.tripId, 'DROPOFF', dropoff_location);
                        }
                    } else {
                        console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y trip m·∫´u cho route ${route.id} ƒë·ªÉ l·∫•y ƒëi·ªÉm ƒë√≥n/tr·∫£.`);
                    }
                
                    console.log(`‚úÖ T·∫°o chuy·∫øn ID ${result.tripId} th√†nh c√¥ng`);
                }
            }
        }

        console.log("‚úÖ Ho√†n t·∫•t t·∫°o c√°c chuy·∫øn xe m·ªõi.");
    } catch (error) {
        console.error("‚ùå L·ªói trong cron job t·∫°o chuy·∫øn:", error);
    }
});
