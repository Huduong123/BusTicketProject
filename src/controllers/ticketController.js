const Ticket = require('../models/ticketModel');
const { maskPhone, maskEmail } = require('./successController');

class TicketController {
    async getAllTicket(req, res) {
        try {
            const tickets = await Ticket.getAllTicket();
            res.status(200).json(tickets);
        } catch (error) {
            console.log(error);
            res.status(500).json({ message: 'L·ªói server' });
        }
    }

    async getTicketById(req, res) {
        try {
            const { id } = req.params;
            const ticket = await Ticket.getTicketById(id);
            if (ticket) {
                res.status(200).json(ticket);
            } else {
                res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y v√©' });
            }
        } catch (error) {
            res.status(500).json({ message: 'L·ªói server' });
        }
    }
    async getTicketsByUser(req, res) {
      try {
        const userId = req.user?.id;
        if (!userId) {
          return res.redirect('/login');
        }
    
        const tickets = await Ticket.getTicketsByUserId(userId);
        res.render('thong-tin-tai-khoan/lich-su-mua-ve', {
          tickets
        });
      } catch (err) {
        console.error("‚ùå L·ªói l·∫•y l·ªãch s·ª≠ v√©:", err);
        res.status(500).send("L·ªói server");
      }
    }
    
    async addTicket(req, res) {
      try {
        const {
          trip_id,
          ticket_price,
          seat_ids,
          customer_name,
          customer_phone,
          customer_email,
          pickup_location,
          dropoff_location,
          total_price_ticket
        } = req.body;
  
        const user_id = req.user?.id || null;
  
        if (
          !trip_id || !ticket_price || !seat_ids || seat_ids.length === 0 ||
          !customer_name || !customer_phone || !customer_email
        ) {
          return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin ƒë·∫∑t v√©' });
        }
  
        const { ticket_id, ticket_code } = await Ticket.addTicket(
          trip_id,
          user_id,
          ticket_price,
          seat_ids,
          customer_name,
          customer_phone,
          customer_email,
          pickup_location,
          dropoff_location,
          total_price_ticket
        );
  
        res.status(201).json({
          message: 'V√© ƒë√£ ƒë∆∞·ª£c gi·ªØ t·∫°m th·ªùi!',
          ticket_id,
          ticket_code
        });
      } catch (err) {
        console.error('‚ùå L·ªói khi ƒë·∫∑t v√©:', err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
      }
    }
    
    

    // X√°c nh·∫≠n thanh to√°n

    
    async deleteExpiredTickets(req, res) {
        try {
            await Ticket.deleteExpiredTickets();
            res.status(200).json({ message: "ƒê√£ x√≥a v√© h·∫øt h·∫°n." });
        } catch (error) {
            res.status(500).json({ message: 'L·ªói server' });
        }
    }
   
    async updateTicket(req, res) {
        try {
          const { ticket_id } = req.params;
          const { customer_name, customer_phone, status, seat_numbers } = req.body;
      
          const ticket = await Ticket.getTicketById(ticket_id);
          if (!ticket) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y v√©" });
          }
      
          const trip_id = ticket.trip_id;
      
          // üîÑ Chuy·ªÉn seat_number (v√≠ d·ª• B01, B02) th√†nh seat_id
          const seat_ids = await Ticket.getSeatIdsBySeatNumbers(trip_id, seat_numbers);
      
          if (seat_ids.length !== seat_numbers.length) {
            return res.status(400).json({ message: "M·ªôt ho·∫∑c nhi·ªÅu gh·∫ø kh√¥ng h·ª£p l·ªá cho chuy·∫øn n√†y" });
          }
      
          // C·∫≠p nh·∫≠t gh·∫ø: gh·∫ø c≈© v·ªÅ AVAILABLE, gh·∫ø m·ªõi BOOKED
          const oldSeatIds = await Ticket.getSeatIdsByTicketId(ticket_id);
          await Ticket.updateSeatStatus(oldSeatIds, 'AVAILABLE');
          await Ticket.updateSeatStatus(seat_ids, 'BOOKED');
      
          // C·∫≠p nh·∫≠t b·∫£ng ticket_seats
          await Ticket.deleteSeatsOfTicket(ticket_id);
          await Ticket.insertSeatsForTicket(ticket_id, seat_ids);
      
          // C·∫≠p nh·∫≠t th√¥ng tin kh√°ch v√† tr·∫°ng th√°i v√©
          await Ticket.updateTicketCustomerStatus(ticket_id, customer_name, customer_phone, status);
      
          res.status(200).json({ message: "C·∫≠p nh·∫≠t v√© th√†nh c√¥ng!" });
        } catch (error) {
          console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t v√©:", error);
          res.status(500).json({ message: "L·ªói server", error: error.message });
        }
      }
      
      
      
      
    async getDetailedTickets(req, res) {
        try {
            const { trip_id, ticket_id } = req.query;
            const user_id = req.user ? req.user.id: null;
            let detailedTickets;
    
            if (trip_id && ticket_id) {
                detailedTickets = await Ticket.getDetailedTickets(trip_id, ticket_id);
            } else {
                return res.status(400).json({ message: "Thi·∫øu trip_id ho·∫∑c ticket_id" });
            }
    
            if (detailedTickets.length === 0) {
                return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin v√©" });
            }
    
            res.status(200).json(detailedTickets);
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin chi ti·∫øt v√©:", error);
            res.status(500).json({ message: 'L·ªói server' });
        }
    }
    async searchTicketByIdOrCode(req, res) {
        try {
            const { id, ticket_code } = req.query;
    
            if (!id && !ticket_code) {
                return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p id ho·∫∑c ticket_code" });
            }
    
            const tickets = await Ticket.searchTicketByIdOrCode(id, ticket_code);
            
            if (tickets.length > 0) {
                res.status(200).json(tickets);
            } else {
                res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y v√©" });
            }
        } catch (error) {
            console.error("L·ªói t√¨m ki·∫øm v√©:", error);
            res.status(500).json({ message: "L·ªói server" });
        }
    }
    

    async deleteTicket(req, res) {
        try {
            const { id } = req.params;
            const affectedRows = await Ticket.deleteTicket(id);
            if (affectedRows > 0) {
                res.status(200).json({ message: 'X√≥a v√© th√†nh c√¥ng' });
            } else {
                res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y v√© ƒë·ªÉ x√≥a' });
            }
        } catch (error) {
            res.status(500).json({ message: 'L·ªói server' });
        }
    }

    async renderAdminTickets(req, res) {
        try {
            const tickets = await Ticket.getAllTicketsWithTripName();
            res.render('admin/tickets/tickets', {
                title: "Qu·∫£n l√Ω V√© ƒë·∫∑t",
                tickets: tickets || []
            });
        } catch (error) {
            console.log(error);
            res.status(500).send("L·ªói khi t·∫£i danh s√°ch v√© ƒë·∫∑t");
        }
    }
    
    async renderUpdateTicket(req, res) {
        try {
          const { ticket_id } = req.params;
          const ticket = await Ticket.getTicketById(ticket_id);
          if (!ticket) return res.status(404).send("Kh√¥ng t√¨m th·∫•y v√©.");
      
          // L·∫•y t·∫•t c·∫£ gh·∫ø c·ªßa chuy·∫øn ƒëi
          const seats = await Ticket.getSeatsByTripId(ticket.trip_id);
      
          // L·∫•y danh s√°ch seat_id ƒë√£ ƒë·∫∑t c·ªßa v√© hi·ªán t·∫°i
          const selectedSeatIds = await Ticket.getSeatIdsByTicketId(ticket_id);
          ticket.seat_ids = selectedSeatIds.map(s => s.seat_id);
      
          // L·∫•y seat_number (v√≠ d·ª•: A01, A02)
          const seatNumbers = await Ticket.getSeatNumbersByTicketId(ticket_id);
          ticket.seat_numbers = seatNumbers;
      
          // S·ªë l∆∞·ª£ng gh·∫ø c·∫ßn gi·ªØ nguy√™n khi c·∫≠p nh·∫≠t
          ticket.expectedSeats = seatNumbers.length;
      
          res.render('admin/tickets/updatetickets', {
            ticket,
            seats
          });
        } catch (err) {
          console.error("‚ùå L·ªói renderUpdateTicket:", err);
          res.status(500).send("L·ªói server");
        }
      }
      
      async cancelTicket(req, res) {
        try {
          const { ticket_id } = req.params;
      
          const ticket = await Ticket.getTicketById(ticket_id);
          if (!ticket) {
            return res.status(404).send("Kh√¥ng t√¨m th·∫•y v√©.");
          }
      
          // L·∫•y danh s√°ch gh·∫ø ƒë√£ ƒë·∫∑t c·ªßa v√©
          const seatIds = await Ticket.getSeatIdsByTicketId(ticket_id);
      
          // C·∫≠p nh·∫≠t tr·∫°ng th√°i gh·∫ø v·ªÅ AVAILABLE
          await Ticket.updateSeatStatus(seatIds, 'AVAILABLE');
      
          // X√≥a kh·ªèi b·∫£ng ticket_seats
          await Ticket.deleteSeatsOfTicket(ticket_id);
      
          // C·∫≠p nh·∫≠t v√© th√†nh CANCELED
          await Ticket.updateTicketStatus(ticket_id, 'CANCELED');
      
          res.redirect('/admins/tickets');
        } catch (error) {
          console.error("‚ùå L·ªói khi h·ªßy v√©:", error);
          res.status(500).send("L·ªói khi h·ªßy v√©.");
        }
      }
      async removeTicket(req, res) {
        try {
          const { ticket_id } = req.params;
      
          const ticket = await Ticket.getTicketById(ticket_id);
          if (!ticket) {
            return res.status(404).send("Kh√¥ng t√¨m th·∫•y v√©.");
          }
      
          const seatIds = await Ticket.getSeatIdsByTicketId(ticket_id);
      
          // Tr·∫£ l·∫°i gh·∫ø n·∫øu c√≤n
          if (seatIds.length > 0) {
            await Ticket.updateSeatStatus(seatIds, 'AVAILABLE');
            await Ticket.deleteSeatsOfTicket(ticket_id);
          }
      
          // X√≥a v√©
          await Ticket.deleteTicket(ticket_id);
      
          res.redirect('/admins/tickets');
        } catch (error) {
          console.error("‚ùå L·ªói khi x√≥a v√©:", error);
          res.status(500).send("L·ªói khi x√≥a v√©.");
        }
      }
      

      async searchTickets(req, res) {
        try {
          const { customer_name, customer_phone, ticket_code, status, booking_time } = req.query;
      
          const tickets = await Ticket.searchTickets({
            customer_name,
            customer_phone,
            ticket_code,
            status,
            booking_time,
          });
      
          // T·∫°o m√¥ t·∫£ cho k·∫øt qu·∫£ t√¨m ki·∫øm
          const searchDescription = `K·∫øt qu·∫£ l·ªçc theo: ${
            customer_name ? `T√™n ng∆∞·ªùi ƒë·∫∑t: "${customer_name}", ` : ''
          }${customer_phone ? `SƒêT: "${customer_phone}", ` : ''}${
            ticket_code ? `M√£ v√©: "${ticket_code}", ` : ''
          }${status ? `Tr·∫°ng th√°i: "${status}", ` : ''}${
            booking_time ? `Ng√†y ƒë·∫∑t: "${booking_time}"` : ''
          }`.replace(/, $/, '');
      
          res.render('admin/tickets/tickets', {
            title: "Qu·∫£n l√Ω V√© ƒë·∫∑t",
            tickets,
            customer_name,
            customer_phone,
            ticket_code,
            status,
            booking_time,
            searchDescription,
          });
        } catch (err) {
          console.error("‚ùå L·ªói khi t√¨m ki·∫øm v√©:", err);
          res.status(500).send("L·ªói server");
        }
      }
      async viewTicketDetail(req, res) {
        try {
          const { ticket_id } = req.params;
          const ticket = await Ticket.getTicketById(ticket_id);
      
          if (!ticket) {
            return res.status(404).send("Kh√¥ng t√¨m th·∫•y v√©.");
          }
      
          // üîí Th√™m th√¥ng tin ƒë√£ ·∫©n
          ticket.customer_phone_masked = maskPhone(ticket.customer_phone);
          ticket.customer_email_masked = maskEmail(ticket.customer_email);
      
          res.render('thong-tin-tai-khoan/chi-tiet-ve', { ticket });
        } catch (err) {
          console.error("‚ùå L·ªói khi hi·ªÉn th·ªã chi ti·∫øt v√©:", err);
          res.status(500).send("L·ªói server");
        }
      }
      
      async findTicketByCodeAndPhone(req, res) {
        try {
            const { phone, 'ticket-code': ticket_code } = req.body;
    
            if (!phone || !ticket_code) {
                return res.render('traCuuVe', { error: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.', ticket: null });
            }
    
            const ticket = await Ticket.findTicketByCodeAndPhone(ticket_code, phone);
    
            if (!ticket) {
                return res.render('traCuuVe', { error: 'Kh√¥ng t√¨m th·∫•y v√© ph√π h·ª£p.', ticket: null });
            }
    
            return res.render('thong-tin-tai-khoan/chi-tiet-ve', { ticket });
        } catch (error) {
            console.error("‚ùå L·ªói tra c·ª©u v√©:", error);
            res.status(500).render('traCuuVe', { error: 'L·ªói server khi tra c·ª©u.', ticket: null });
        }
    }
    
}

module.exports = new TicketController();